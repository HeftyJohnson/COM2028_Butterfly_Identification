# -*- coding: utf-8 -*-
"""XceptionModel

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cpha7uMmGiMAfJsZIdLxJGawBxnowWba
"""

from tensorflow import keras
from keras import optimizers
from keras.models import Model
from keras.layers import Dense,GlobalAveragePooling2D
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.applications.xception import Xception, preprocess_input
import pandas as pd

df = pd.read_csv(
    r"../content/drive/MyDrive/uos-com2028/train.txt", delim_whitespace=True,
    names=['file', 'type'])

df['type'] = df['type'].astype(str)

IMAGE_SIZE = 299
BATCH_SIZE = 26

datagen = ImageDataGenerator(
        rotation_range = 45,
        width_shift_range = 0.2,                  
        height_shift_range = 0.2,
        preprocessing_function=preprocess_input,
        shear_range=0.2,
        zoom_range=0.2)

train_generator = datagen.flow_from_dataframe(
        dataframe=df,
        directory=r"../content/drive/MyDrive/uos-com2028/train",
        x_col='file',
        y_col='type',
        class_mode="categorical",
        target_size=(IMAGE_SIZE,IMAGE_SIZE),
        batch_size=(BATCH_SIZE),
        shuffle='True',
        seed=42)

base_inception = Xception(weights='imagenet', include_top=False, 
                             input_shape=(IMAGE_SIZE, IMAGE_SIZE, 3))
                             
out = base_inception.output
out = GlobalAveragePooling2D()(out)
out = Dense(512, activation='relu')(out)
out = Dense(512, activation='relu')(out)
predictions = Dense(23, activation='softmax')(out)

model = Model(inputs=base_inception.input, outputs=predictions)

optimizer=optimizers.Adam(learning_rate=0.1, epsilon=1.0)

model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])

mc=ModelCheckpoint(filepath=r"../content/drive/MyDrive/uos-com2028/XceptionWeights/", 
                   save_weights_only=True, 
                   monitor='loss', 
                   mode='min', 
                   save_best_only=True)

model.load_weights(r"../content/drive/MyDrive/uos-com2028/XceptionWeights/")

model.fit(
    train_generator,
    steps_per_epoch=train_generator.n//train_generator.batch_size,
    epochs=20, 
    callbacks=mc)

model.load_weights(r"../content/drive/MyDrive/uos-com2028/XceptionWeights/")

test_generator = datagen.flow_from_directory(
    directory=r"../content/drive/MyDrive/uos-com2028/test",
    target_size=(IMAGE_SIZE, IMAGE_SIZE),
    color_mode="rgb",
    batch_size=3,
    class_mode=None,
    shuffle=False,
    seed=42)

STEP_SIZE_TEST=test_generator.n//test_generator.batch_size
test_generator.reset()
pred=model.predict(test_generator,
steps=STEP_SIZE_TEST,
verbose=1)

import numpy as np
predicted_class_indices=np.argmax(pred,axis=1)

labels = (train_generator.class_indices)
labels = dict((v,k) for k,v in labels.items())
predictions = [labels[k] for k in predicted_class_indices]

filenames = [x.strip("test/.jpg") for x in test_generator.filenames]
results=pd.DataFrame({"id":filenames,"label":predictions})
results.to_csv("results.csv", index=False)